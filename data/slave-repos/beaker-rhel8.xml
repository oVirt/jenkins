<?xml version='1.0' encoding='UTF-8'?>
<job retention_tag="scratch">
  <whiteboard>Provision</whiteboard>
  <recipeSet priority="High">
    <recipe kernel_options="" kernel_options_post="" ks_meta="" role="RECIPE_MEMBERS" whiteboard="">
      <autopick random="false"/>
      <watchdog panic="ignore"/>
      <packages/>
      <ks_appends>
        <ks_append><![CDATA[
%post --log=/root/my-ks-post.log
package_list=(
  git procps-ng createrepo_c distribution-gpg-keys librbd1
  container-selinux rpm-libs
  haveged libvirt qemu-kvm python3-paramiko
  libselinux-utils kmod rpm-plugin-selinux java-1.8.0-openjdk-devel
  python3-pyxdg python2-pip podman python3-pip python3-pytest
  python3-setuptools xdg-user-dirs xdg-utils qemu-kvm
)
package_list+=(python{2,3}-{pyyaml,jinja2,six,py})

dnf install -y "${package_list[@]}"

alternatives --set python /usr/bin/python3

dnf clean all
dnf config-manager --set-disabled beaker-AppStream

# OST related configurations
usermod -a -G root qemu
chmod o+x /root
install -m 0644 -d /var/lib/lago
# check if any routes received via router advertisements are in place
if [[ "$(/sbin/ip -6 route list proto ra)" ]]; then
    # create a list of interfaces with such routes to check accept_ra value
    iflist="$(/sbin/ip -6 route list proto ra | grep -oP '(?<=dev )(\w+)' | sort | uniq)"
    for ifname in $iflist; do
        ra_conf_path="/proc/sys/net/ipv6/conf/$ifname/accept_ra"
        if [[ -f "$ra_conf_path" ]]; then
            if [[ "$(cat $ra_conf_path)" -ne "2" ]]; then
                echo "setting accept_ra=2 on $ifname"
                /sbin/sysctl net.ipv6.conf.$ifname.accept_ra=2
                if [[ "$(cat $ra_conf_path)" -ne "2" ]]; then
                    echo "Failed to configure accept_ra to 2 on $ifname"
                fi
            fi
        fi
    done
fi


# Vars for jenkins slave.
JENKINS_URL=JENKINS-URL
JENKINS_USERNAME=JENKINS-USER
JENKINS_PASSWORD=JENKINS-PASS
CRED_ID=d1366dfc-41f1-4d57-883f-c6941fe1dbea
NODE_NAME=$HOSTNAME
NODE_SLAVE_HOME='/root'
EXECUTORS=1
SSH_PORT=22
LABELS="integ-tests rhel8 psi ${NODE_NAME%%.*}"
USERID=${USER}
DESC="Beaker-Host"
IP_ADDR=$(hostname -I | awk '{print $1}')
SSH_HOST=${IP_ADDR}

# Add the credentials ssh keys.
mkdir /root/.ssh
touch /root/.ssh/authorized_keys
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQipypSdCjrHfL83jFSQvjIpcnNjvvLHC7K9nyxwg5n+j3JYlYwvW5VvolCZ/1JnKB8FkjAo49Zw7Cqf/RrnXTvE1cqEnCBRWWj29BBt0rfVTHKBLgN39gV7KYnbkV30WtBdGAI7rP5Hu9ywJ8RGhZ5YXQbwgDHBMYE/8PqYe4dN7ZRNU1FOXrY/Y6JfPMaie8h/coYtgKrThkYPRG41ku5KPdF/xnfcWBINB/jp1mGDmr1P/GA+/68PHt3W2KnsBjuqnbegk2kNNqK8fVtWZIE5Y53SGJqjP2y6He3dW7VicR3Snkdzm4bCcO+Mvo8tMLJhjX4fZFUbqNfZvVmcWr Generated-by-Nova" >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys


shopt -s nullglob
set -o nounset -o errexit -o pipefail

# Check crumb
COOKIE_JAR="/tmp/cookies"
echo "Checking for CSRF..."
CRUMB=$(curl --insecure --fail -0 --cookie-jar $COOKIE_JAR -u "${JENKINS_USERNAME}:${JENKINS_PASSWORD}" ''${JENKINS_URL}'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)' 2>/dev/null || echo "N/A")
if [[ ${CRUMB} != "N/A" ]]; then
  echo "CSRF Enabled."
else
  echo "CSRF not enabled."
fi

# Create node (doCreateItem)
RESPONSE=$(curl --insecure --cookie $COOKIE_JAR -L -s -o /dev/null -w "%{http_code}" -u "${JENKINS_USERNAME}:${JENKINS_PASSWORD}" -H "Content-Type:application/x-www-form-urlencoded" -H "$CRUMB" -X POST -d 'json={"name": "'"$NODE_NAME"'", "nodeDescription": "'"$DESC"'", "numExecutors": "'"$EXECUTORS"'", "remoteFS": "'"$NODE_SLAVE_HOME"'", "labelString": "'"$LABELS"'", "mode": "EXCLUSIVE", "": ["hudson.plugins.sshslaves.SSHLauncher", "hudson.slaves.RetentionStrategy$Always"], "launcher": {"stapler-class": "hudson.plugins.sshslaves.SSHLauncher", "$class": "hudson.plugins.sshslaves.SSHLauncher", "host": "'"$SSH_HOST"'", "credentialsId": "'"$CRED_ID"'", "port": "'"$SSH_PORT"'", "javaPath": "", "jvmOptions": "", "prefixStartSlaveCmd": "", "suffixStartSlaveCmd": "", "launchTimeoutSeconds": "", "maxNumRetries": "", "retryWaitTime": ""}, "retentionStrategy": {"stapler-class": "hudson.slaves.RetentionStrategy$Always", "$class": "hudson.slaves.RetentionStrategy$Always"}, "nodeProperties": {"stapler-class-bag": "true"}, "type": "hudson.slaves.DumbSlave", "crumb": "'"$CRUMB"'"}' "${JENKINS_URL}/computer/doCreateItem?name=${NODE_NAME}&type=hudson.slaves.DumbSlave")

if [[ ${RESPONSE} == "200" ]]; then
  echo "SUCCESS"
else
  echo "ERROR: Failed to create node. Response code: [${RESPONSE}]"
  exit 1
fi
%end
]]>
        </ks_append>
      </ks_appends>
      <repos>
      </repos>
      <distroRequires>
        <and>
          <distro_family op="=" value="RedHatEnterpriseLinux8"/>
          <distro_variant op="=" value="baseos"/>
          <distro_arch op="=" value="x86_64"/>
          <distro_name op="=" value="RHEL-8.3.0"/>
        </and>
      </distroRequires>
      <hostRequires>
        <and>
          <system_type op="=" value="Machine"/>
          <hostname op="like" value="%%.rhv-ci-01.lab.eng.rdu2.redhat.com"/>
        </and>
      </hostRequires>
      <partitions/>
      <task name="/distribution/reservesys" role="SERVERS">
        <params>
          <param name="RESERVETIME" value="10800"/>
        </params>
      </task>
    </recipe>
  </recipeSet>
</job>
